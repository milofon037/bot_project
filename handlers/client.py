from aiogram import types, Dispatcher
from keyboards import sis_ad, python, alg_log, vr_ar, cyber, menu, fields, podacha
from create import bot, dp


date = dict()
INFO = '''
–ü—Ä–∏–≥–ª–∞—à–∞–µ–º –≤–∞—Å –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ –≤ IT-–∫—É–±üòÅ–¢–µ–ø–µ—Ä—å –≤—ã–±—Ä–∞—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –Ω–∏–º –∏ –ø–æ–¥–∞—Ç—å –∑–∞—è–≤–ª–µ–Ω–∏–µ –≤ —Ä–∞–∑—ã –ø—Ä–æ—â–µ!
–û—Ç –≤–∞—Å —Ç—Ä–µ–±—É–µ—Ç—Å—è –ª–∏—à—å –ø—Ä–∏–Ω—è—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ, –≤—ã–±—Ä–∞—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É —á–µ—Ä–µ–∑ –±–æ—Ç–∞ –∏ –ø—Ä–∏–µ—Ö–∞—Ç—å —Å —ç—Ç–∏–º –¥–æ–∫—É–º–µ–Ω—Ç–∞–º –∫ –Ω–∞–º!üòÄ/menu , —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ!'''


# @dp.callback_query_handler(lambda c: c.data and c.data.startswith('f_'))
async def fields2(c: types.CallbackQuery):
    field = c.data[-2:]
    if field == 'sa':
        info = open('documents/sis.txt', 'rb').read().decode("UTF-8")
        await bot.send_message(c.from_user.id, text=info, reply_markup=sis_ad)
    elif field == 'py':
        info = open('documents/pyth.txt', 'rb').read().decode("UTF-8")
        await bot.send_message(c.from_user.id, text=info, reply_markup=python)
    elif field == 'al':
        info = open('documents/alg.txt', 'rb').read().decode("UTF-8")
        await bot.send_message(c.from_user.id, text=info, reply_markup=alg_log)
    elif field == 'vr':
        info = open('documents/vr.txt', 'rb').read().decode("UTF-8")
        await bot.send_message(c.from_user.id, text=info, reply_markup=vr_ar)
    elif field == 'cb':
        info = open('documents/cybergig.txt', 'rb').read().decode("UTF-8")
        await bot.send_message(c.from_user.id, text=info, reply_markup=cyber)
    date[c.from_user.id] = dict()
    await bot.answer_callback_query(c.id)


# @dp.callback_query_handler(lambda c: c.data == 'zayava')
async def zayava(c: types.CallbackQuery):
    doc = open('../documents/byudzhet-kub.docx', 'rb')
    await bot.send_document(chat_id=c.from_user.id, document=doc)
    await bot.answer_callback_query(c.id)


# @dp.message_handler(commands='start')
async def start(m: types.Message):
    date = int(m.date.hour)
    hello = ''
    if date in range(5, 13):
        hello = '–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ!'
    elif date in range(13, 18):
        hello = '–î–æ–±—Ä—ã–π –¥–µ–Ω—å!'
    elif date in range(18, 23):
        hello = '–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä!'
    else:
        hello = '–î–æ–±—Ä–æ–π –Ω–æ—á–∏!'
    photo = open('photos/itcube.jpg', 'rb')
    await bot.send_photo(m.chat.id, photo, hello + ' ' + INFO, reply_markup=menu)


# @dp.message_handler(lambda m: m.text == '–í—ã–±—Ä–∞—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µüéì')
async def field(m: types.Message):
    await m.answer('–í—ã–±–∏—Ä–∞–µ–º!', reply_markup=fields)


# @dp.message_handler(lambda m: m.text == '–û—Ç–º–µ–Ω–∞‚ùå')
async def close(m: types.Message):
    remove = types.ReplyKeyboardRemove()
    await m.answer('–û—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=remove)


# dp.message_handler(lambda m: m.text == '–ü–æ—Å—Ç—É–ø–∏—Ç—å –≤ IT-–∫—É–±!')
async def podacha_zayavki(m: types.Message):
    await m.answer('–í—ã –≤—Å–µ–≥–æ –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —à–∞–≥–∞—Ö –æ—Ç –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è!!!!', reply_markup=podacha)


def reg_client_handlers(dp: Dispatcher):
    dp.register_callback_query_handler(fields2, lambda c: c.data and c.data.startswith('f_'))
    # dp.register_callback_query_handler(zayava, lambda c: c.data == 'zayava')
    dp.register_message_handler(start, commands='start')
    dp.register_message_handler(field, lambda m: m.text == '–£–∑–Ω–∞—Ç—å –æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Öüéì')
    dp.register_message_handler(podacha_zayavki, lambda m: m.text == '–ü–æ—Å—Ç—É–ø–∏—Ç—å –≤ IT-–∫—É–±!')
    dp.register_message_handler(close, lambda m: m.text == '–û—Ç–º–µ–Ω–∞‚ùå')
